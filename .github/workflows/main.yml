name: Flutter CI/CD

on:
  push:
    branches: [ main, develop ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      build_number:
        description: 'Build number override'
        required: false

env:
  FLUTTER_VERSION: '3.24.5'
  JAVA_VERSION: '17'
  XCODE_VERSION: '15.0'
  NODE_VERSION: '20'

jobs:
  # ============= AN√ÅLISE E TESTES =============
  test:
    name: Test & Analyze
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        
      - name: üéØ Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: 3.35.3
          channel: 'stable'
          cache: true
          
      - name: üì¶ Get dependencies
        run: |
          flutter pub get
          flutter pub global activate coverage
          
      - name: üîç Analyze
        run: flutter analyze --no-fatal-infos
        
      - name: üß™ Run tests
        run: |
          flutter test --coverage --test-randomize-ordering-seed random
          
      - name: üìä Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: coverage/lcov.info
          
      - name: üíæ Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.pub-cache
            .dart_tool
          key: flutter-${{ runner.os }}-${{ hashFiles('**/pubspec.lock') }}

  # ============= BUILD ANDROID =============
  build-android:
    name: Build Android (APK + AAB)
    needs: test
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      build_number: ${{ steps.version.outputs.build_number }}
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        
      - name: üéØ Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          
      - name: üéØ Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: 3.35.3
          channel: 'stable'
          cache: true
          
      - name: üì¶ Get dependencies
        run: flutter pub get
        
      - name: üî¢ Set version
        id: version
        run: |
          VERSION=$(grep 'version:' pubspec.yaml | sed 's/version: //g' | sed 's/+.*//')
          BUILD_NUMBER=${{ github.event.inputs.build_number || github.run_number }}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT
          sed -i "s/version: .*/version: $VERSION+$BUILD_NUMBER/" pubspec.yaml
          
      - name: üîê Decode Android keystore
        env:
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
        run: |
          echo "$ANDROID_KEYSTORE_BASE64" | base64 --decode > android/app/upload-keystore.jks
          
      - name: üìù Create key.properties
        env:
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: |
          cat > android/key.properties <<EOF
          storePassword=$KEYSTORE_PASSWORD
          keyPassword=$KEY_PASSWORD
          keyAlias=$KEY_ALIAS
          storeFile=upload-keystore.jks
          EOF
          
      - name: üíæ Cache Gradle
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          
      - name: üèóÔ∏è Build APK
        run: |
          flutter build apk --release --split-per-abi \
            --build-name=${{ steps.version.outputs.version }} \
            --build-number=${{ steps.version.outputs.build_number }}
          
      - name: üèóÔ∏è Build AAB
        run: |
          flutter build appbundle --release \
            --build-name=${{ steps.version.outputs.version }} \
            --build-number=${{ steps.version.outputs.build_number }}
          
      - name: üì§ Upload APK artifacts
        uses: actions/upload-artifact@v4
        with:
          name: apk-release
          path: build/app/outputs/flutter-apk/app-*-release.apk
          
      - name: üì§ Upload AAB artifact
        uses: actions/upload-artifact@v4
        with:
          name: aab-release
          path: build/app/outputs/bundle/release/app-release.aab
          
      - name: üßπ Clean sensitive files
        if: always()
        run: |
          rm -f android/app/upload-keystore.jks
          rm -f android/key.properties

# ============= BUILD iOS =============
build-ios:
  name: Build iOS (IPA)
  needs: test
  runs-on: macos-latest

  steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üéØ Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: 3.35.3
        channel: 'stable'
        cache: true

    - name: üéØ Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.2'
        bundler-cache: true

    - name: üì¶ Get Flutter dependencies
      run: flutter pub get

    # --- IN√çCIO DA MUDAN√áA CR√çTICA ---
    - name: üîê Install certificates
      env:
        BUILD_CERTIFICATE_BASE64: ${{ secrets.IOS_BUILD_CERTIFICATE_BASE64 }}
        P12_PASSWORD: ${{ secrets.IOS_P12_PASSWORD }}
        BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.IOS_PROVISION_PROFILE_BASE64 }}
        KEYCHAIN_PASSWORD: ${{ secrets.IOS_KEYCHAIN_PASSWORD }}
      run: |
        set -euo pipefail

        # --- sanity checks ---
        if [ -z "${BUILD_CERTIFICATE_BASE64:-}" ] || [ -z "${BUILD_PROVISION_PROFILE_BASE64:-}" ] || [ -z "${P12_PASSWORD:-}" ] || [ -z "${KEYCHAIN_PASSWORD:-}" ]; then
          echo "::error ::One or more iOS signing secrets are empty. Make sure IOS_BUILD_CERTIFICATE_BASE64, IOS_P12_PASSWORD, IOS_PROVISION_PROFILE_BASE64 and IOS_KEYCHAIN_PASSWORD are set."
          exit 1
        fi

        # paths
        CERTIFICATE_PATH="$RUNNER_TEMP/build_certificate.p12"
        PP_PATH="$RUNNER_TEMP/build_pp.mobileprovision"
        KEYCHAIN_PATH="$RUNNER_TEMP/app-signing.keychain-db"

        echo "Decoding base64 assets to temporary files..."
        # decode with portable fallback (GNU/BSD)
        printf '%s' "$BUILD_CERTIFICATE_BASE64" | base64 --decode > "$CERTIFICATE_PATH" 2>/dev/null || printf '%s' "$BUILD_CERTIFICATE_BASE64" | base64 -D > "$CERTIFICATE_PATH"
        printf '%s' "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode > "$PP_PATH" 2>/dev/null || printf '%s' "$BUILD_PROVISION_PROFILE_BASE64" | base64 -D > "$PP_PATH"

        # verify files look reasonable
        if [ ! -s "$CERTIFICATE_PATH" ]; then
          echo "::error ::Decoded certificate file is empty or missing ($CERTIFICATE_PATH). Check the secret encoding."
          exit 1
        fi
        if [ ! -s "$PP_PATH" ]; then
          echo "::error ::Decoded provisioning profile is empty or missing ($PP_PATH). Check the secret encoding."
          exit 1
        fi

        echo "Creating temporary keychain..."
        security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"

        # make keychain usable and avoid timing issues
        security set-keychain-settings -t 3600 -l "$KEYCHAIN_PATH" || true

        # preserve current keychains and prepend our keychain to the search path
        CURRENT_KEYCHAINS=$(security list-keychains -d user | sed -E 's/^[[:space:]]*"(.+)"$/\1/' | tr '\n' ' ')
        security list-keychains -d user -s "$KEYCHAIN_PATH" $CURRENT_KEYCHAINS

        # unlock it
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"

        echo "Importing certificate into keychain..."
        # import and allow codesign/security to access the private key
        security import "$CERTIFICATE_PATH" -k "$KEYCHAIN_PATH" -P "$P12_PASSWORD" -A -T /usr/bin/codesign -T /usr/bin/security

        echo "Setting key partition list to allow codesign access..."
        # allow codesign / xcodebuild to access the key (required on modern macOS)
        security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH" || true

        echo "Listing codesigning identities (for debug) ..."
        security find-identity -v -p codesigning "$KEYCHAIN_PATH" || true

        echo "Installing provisioning profile..."
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp "$PP_PATH" ~/Library/MobileDevice/Provisioning\ Profiles/

        echo "Certificates and provisioning profile installed successfully."

    - name: üîß Prepare for iOS build
      run: flutter build ios --config-only

    - name: üì¶ Install iOS dependencies (CocoaPods)
      run: |
        cd ios
        pod install --repo-update

    # --- FIM DA MUDAN√áA CR√çTICA ---

    - name: üíæ Cache Pods
      uses: actions/cache@v4
      with:
        path: ios/Pods
        key: pods-${{ runner.os }}-${{ hashFiles('**/Podfile.lock') }}

    - name: üî¢ Set version
      run: |
        VERSION=$(grep 'version:' pubspec.yaml | sed 's/version: //g' | sed 's/+.*//')
        BUILD_NUMBER=${{ github.event.inputs.build_number || github.run_number }}
        sed -i '' "s/version: .*/version: $VERSION+$BUILD_NUMBER/" pubspec.yaml

    - name: üèóÔ∏è Build IPA
      run: |
        flutter build ipa --release \
          --export-options-plist=ios/ExportOptions.plist

    - name: üì§ Upload IPA artifact
      uses: actions/upload-artifact@v4
      with:
        name: ipa-release
        path: build/ios/ipa/*.ipa

    - name: üßπ Clean keychain
      if: always()
      run: |
        set -euo pipefail
        # remove our temporary keychain from search list (restore previous list)
        CURRENT_KEYCHAINS=$(security list-keychains -d user | sed -E 's/^[[:space:]]*"(.+)"$/\1/' | tr '\n' ' ')
        # Try to delete the created keychain (ignore failures)
        security delete-keychain "$KEYCHAIN_PATH" || true
        rm -rf ~/Library/MobileDevice/Provisioning\ Profiles/*.mobileprovision || true


  # ============= DEPLOY =============
  deploy:
    name: Deploy to Stores
    needs: [build-android, build-ios]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: üì• Download artifacts
        uses: actions/download-artifact@v4
        
      - name: üöÄ Deploy to Google Play
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}
          packageName: com.example.trackie_app
          releaseFiles: aab-release/app-release.aab
          track: internal
          status: draft
          
      - name: üöÄ Deploy to App Store Connect
        env:
          APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
        run: |
          # Use fastlane or xcrun altool for upload
          echo "Deploy to TestFlight"
          
      - name: üìù Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            apk-release/*.apk
            aab-release/*.aab
            ipa-release/*.ipa
          generate_release_notes: true
          draft: false
          prerelease: false
