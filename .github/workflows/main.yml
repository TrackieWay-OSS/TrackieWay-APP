name: Flutter CI/CD

on:
  push:
    branches: [ main, develop ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      build_number:
        description: 'Build number override'
        required: false

env:
  FLUTTER_VERSION: '3.24.5'
  JAVA_VERSION: '17'
  XCODE_VERSION: '15.0'
  NODE_VERSION: '20'

jobs:
  # ============= ANÁLISE E TESTES =============
  test:
    name: Test & Analyze
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🎯 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: 3.35.3
          channel: 'stable'
          cache: true
          
      - name: 📦 Get dependencies
        run: |
          flutter pub get
          flutter pub global activate coverage
          
      - name: 🔍 Analyze
        run: flutter analyze --no-fatal-infos
        
      - name: 🧪 Run tests
        run: |
          flutter test --coverage --test-randomize-ordering-seed random
          
      - name: 📊 Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: coverage/lcov.info
          
      - name: 💾 Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.pub-cache
            .dart_tool
          key: flutter-${{ runner.os }}-${{ hashFiles('**/pubspec.lock') }}

  # ============= BUILD ANDROID =============
  build-android:
    name: Build Android (APK + AAB)
    needs: test
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      build_number: ${{ steps.version.outputs.build_number }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🎯 Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          
      - name: 🎯 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: 3.35.3
          channel: 'stable'
          cache: true
          
      - name: 📦 Get dependencies
        run: flutter pub get
        
      - name: 🔢 Set version
        id: version
        run: |
          VERSION=$(grep 'version:' pubspec.yaml | sed 's/version: //g' | sed 's/+.*//')
          BUILD_NUMBER=${{ github.event.inputs.build_number || github.run_number }}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT
          sed -i "s/version: .*/version: $VERSION+$BUILD_NUMBER/" pubspec.yaml
          
      - name: 🔐 Decode Android keystore
        env:
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
        run: |
          echo "$ANDROID_KEYSTORE_BASE64" | base64 --decode > android/app/upload-keystore.jks
          
      - name: 📝 Create key.properties
        env:
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: |
          cat > android/key.properties <<EOF
          storePassword=$KEYSTORE_PASSWORD
          keyPassword=$KEY_PASSWORD
          keyAlias=$KEY_ALIAS
          storeFile=upload-keystore.jks
          EOF
          
      - name: 💾 Cache Gradle
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          
      - name: 🏗️ Build APK
        run: |
          flutter build apk --release --split-per-abi \
            --build-name=${{ steps.version.outputs.version }} \
            --build-number=${{ steps.version.outputs.build_number }}
          
      - name: 🏗️ Build AAB
        run: |
          flutter build appbundle --release \
            --build-name=${{ steps.version.outputs.version }} \
            --build-number=${{ steps.version.outputs.build_number }}
          
      - name: 📤 Upload APK artifacts
        uses: actions/upload-artifact@v3
        with:
          name: apk-release
          path: build/app/outputs/flutter-apk/app-*-release.apk
          
      - name: 📤 Upload AAB artifact
        uses: actions/upload-artifact@v3
        with:
          name: aab-release
          path: build/app/outputs/bundle/release/app-release.aab
          
      - name: 🧹 Clean sensitive files
        if: always()
        run: |
          rm -f android/app/upload-keystore.jks
          rm -f android/key.properties

  # ============= BUILD iOS =============
  build-ios:
    name: Build iOS (IPA)
    needs: test
    runs-on: macos-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🎯 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: 3.35.3
          channel: 'stable'
          cache: true
          
      - name: 🎯 Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true
          
      - name: 📦 Install CocoaPods
        run: |
          sudo gem install cocoapods
          
      - name: 📦 Get Flutter dependencies
        run: flutter pub get
        
      - name: 💾 Cache Pods
        uses: actions/cache@v3
        with:
          path: ios/Pods
          key: pods-${{ runner.os }}-${{ hashFiles('**/Podfile.lock') }}
          
      - name: 📦 Install iOS dependencies
        run: |
          cd ios
          pod install --repo-update
          
      - name: 🔐 Install certificates
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.IOS_BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.IOS_P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.IOS_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.IOS_KEYCHAIN_PASSWORD }}
        run: |
          # Create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          
          # Import certificate and provisioning profile
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH
          
          # Create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          # Import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          
          # Apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
          
      - name: 🔢 Set version
        run: |
          VERSION=$(grep 'version:' pubspec.yaml | sed 's/version: //g' | sed 's/+.*//')
          BUILD_NUMBER=${{ github.event.inputs.build_number || github.run_number }}
          sed -i '' "s/version: .*/version: $VERSION+$BUILD_NUMBER/" pubspec.yaml
          
      - name: 🏗️ Build IPA
        run: |
          flutter build ipa --release \
            --export-options-plist=ios/ExportOptions.plist
            
      - name: 📤 Upload IPA artifact
        uses: actions/upload-artifact@v3
        with:
          name: ipa-release
          path: build/ios/ipa/*.ipa
          
      - name: 🧹 Clean keychain
        if: always()
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm -rf ~/Library/MobileDevice/Provisioning\ Profiles

  # ============= DEPLOY =============
  deploy:
    name: Deploy to Stores
    needs: [build-android, build-ios]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: 📥 Download artifacts
        uses: actions/download-artifact@v3
        
      - name: 🚀 Deploy to Google Play
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}
          packageName: com.example.trackie_app
          releaseFiles: aab-release/app-release.aab
          track: internal
          status: draft
          
      - name: 🚀 Deploy to App Store Connect
        env:
          APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
        run: |
          # Use fastlane or xcrun altool for upload
          echo "Deploy to TestFlight"
          
      - name: 📝 Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            apk-release/*.apk
            aab-release/*.aab
            ipa-release/*.ipa
          generate_release_notes: true
          draft: false
          prerelease: false
